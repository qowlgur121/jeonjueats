name: Deploy JeonjuEats to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push user app image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/jeonjueats-user-app
        file: ./frontend/jeonjueats-user-app/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-user:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push owner app image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/jeonjueats-owner-app
        file: ./frontend/jeonjueats-owner-app/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-owner:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        timeout: 600s
        command_timeout: 600s
        script: |
          # 프로젝트 디렉토리 생성 및 이동
          mkdir -p /home/ubuntu/jeonjueats
          cd /home/ubuntu/jeonjueats
          
          # 기존 컨테이너 정리
          docker compose -f docker-compose.prod.yml down || true
          
          # Git 저장소 클론 또는 업데이트  
          if [ ! -d ".git" ]; then
            cd /home/ubuntu
            rm -rf jeonjueats
            git clone https://github.com/jihyeokbae/jeonjueats.git
            cd jeonjueats
          else
            git fetch origin main
            git reset --hard origin/main
            git pull origin main
          fi
          
          # 환경 변수 파일 생성
          cat > .env << 'EOF'
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=jeonjueats
          MYSQL_USER=jeonjueats_user
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          SPRING_PROFILES_ACTIVE=prod
          SERVER_PORT=8080
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          EOF
          
          # Docker Hub에서 최신 이미지 Pull
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-user:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-owner:latest
          
          # Docker Compose로 실행
          docker compose -f docker-compose.prod.yml up -d
          
          # 불필요한 이미지 정리
          docker image prune -f
          
          # 컨테이너 상태 확인
          docker compose -f docker-compose.prod.yml ps
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 배포가 성공적으로 완료되었습니다!"
          echo "- 유저 앱: http://${{ secrets.EC2_HOST }}"
          echo "- 사장님 앱: http://${{ secrets.EC2_HOST }}:81"
          echo "- 백엔드 API: http://${{ secrets.EC2_HOST }}:8080"
        else
          echo "❌ 배포에 실패했습니다."
        fi