name: Deploy JeonjuEats to EC2

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-backend:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push user app image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/jeonjueats-user-app
        file: ./frontend/jeonjueats-user-app/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-user:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Build and push owner app image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend/jeonjueats-owner-app
        file: ./frontend/jeonjueats-owner-app/Dockerfile.prod
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/jeonjueats-owner:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Deploy to EC2
      uses: appleboy/ssh-action@v1.0.3
      with:
        host: ${{ secrets.EC2_HOST }}
        username: ${{ secrets.EC2_USERNAME }}
        key: ${{ secrets.EC2_SSH_KEY }}
        port: ${{ secrets.EC2_PORT }}
        timeout: 600s
        command_timeout: 600s
        script: |
          # 프로젝트 디렉토리 생성 및 이동
          mkdir -p /home/ubuntu/jeonjueats
          cd /home/ubuntu/jeonjueats
          
          # 기존 컨테이너 정리
          docker compose -f docker-compose.prod.yml down || true
          
          # docker-compose.prod.yml 파일 직접 생성
          cat > docker-compose.prod.yml << 'COMPOSE_EOF'
          services:
            db:
              image: mysql:8.0
              container_name: jeonjueats-db-prod
              environment:
                MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
                MYSQL_DATABASE: ${MYSQL_DATABASE}
                MYSQL_USER: ${MYSQL_USER}
                MYSQL_PASSWORD: ${MYSQL_PASSWORD}
              ports:
                - "3306:3306"
              volumes:
                - mysql_data_prod:/var/lib/mysql
              restart: unless-stopped
              networks:
                - jeonjueats-network

            backend:
              image: ${DOCKER_USERNAME}/jeonjueats-backend:latest
              container_name: jeonjueats-backend-prod
              environment:
                SPRING_PROFILES_ACTIVE: ${SPRING_PROFILES_ACTIVE}
                SPRING_DATASOURCE_URL: jdbc:mysql://db:3306/${MYSQL_DATABASE}
                SPRING_DATASOURCE_USERNAME: ${MYSQL_USER}
                SPRING_DATASOURCE_PASSWORD: ${MYSQL_PASSWORD}
                JWT_SECRET: ${JWT_SECRET}
                SERVER_PORT: ${SERVER_PORT}
              ports:
                - "8080:8080"
              depends_on:
                - db
              restart: unless-stopped
              networks:
                - jeonjueats-network

            frontend-user:
              image: ${DOCKER_USERNAME}/jeonjueats-user:latest
              container_name: jeonjueats-user-prod
              ports:
                - "80:80"
              restart: unless-stopped
              networks:
                - jeonjueats-network

            frontend-owner:
              image: ${DOCKER_USERNAME}/jeonjueats-owner:latest
              container_name: jeonjueats-owner-prod
              ports:
                - "81:80"
              restart: unless-stopped
              networks:
                - jeonjueats-network

          volumes:
            mysql_data_prod:

          networks:
            jeonjueats-network:
              driver: bridge
          COMPOSE_EOF
          
          # 환경 변수 파일 생성
          cat > .env << 'EOF'
          MYSQL_ROOT_PASSWORD=${{ secrets.MYSQL_ROOT_PASSWORD }}
          MYSQL_DATABASE=jeonjueats
          MYSQL_USER=jeonjueats_user
          MYSQL_PASSWORD=${{ secrets.MYSQL_PASSWORD }}
          JWT_SECRET=${{ secrets.JWT_SECRET }}
          SPRING_PROFILES_ACTIVE=prod
          SERVER_PORT=8080
          DOCKER_USERNAME=${{ secrets.DOCKER_USERNAME }}
          EOF
          
          # Docker Hub에서 최신 이미지 Pull
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-backend:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-user:latest
          docker pull ${{ secrets.DOCKER_USERNAME }}/jeonjueats-owner:latest
          
          # Docker Compose로 실행
          docker compose -f docker-compose.prod.yml up -d
          
          # 불필요한 이미지 정리
          docker image prune -f
          
          # 컨테이너 상태 확인
          docker compose -f docker-compose.prod.yml ps
    
    - name: Notify deployment status
      if: always()
      run: |
        if [ ${{ job.status }} == 'success' ]; then
          echo "🎉 배포가 성공적으로 완료되었습니다!"
          echo "- 유저 앱: http://${{ secrets.EC2_HOST }}"
          echo "- 사장님 앱: http://${{ secrets.EC2_HOST }}:81"
          echo "- 백엔드 API: http://${{ secrets.EC2_HOST }}:8080"
        else
          echo "❌ 배포에 실패했습니다."
        fi